using Microsoft.VisualStudio.TestTools.UnitTesting;
using SotringLib;

namespace SortingLib.Tests
{
    /// <summary>
    /// This is a test class for Sorting
    /// </summary>
    [TestClass]
    public class SortingTests
    {
        /// <summary>
        /// A test for MergeSort
        /// </summary>
        [TestMethod]
        public void DoMergeSort_1()
        {
            int [] initialArr = { 468, 645, 873, 66, 580, 318, 458, 544, 784, 637, 317, 634, 463, 642, 845, 723, 878, 237, 342, 255, 556, 350, 879, 634, 892, 780, 941, 631, 887, 689, 933, 976, 104, 156, 660, 906, 237, 755, 669, 555, 51, 864, 288, 786, 736, 350, 582, 473, 166, 170, 915, 995, 365, 799, 54, 118, 765, 238, 173, 800, 376, 827, 656, 94, 704, 340, 530, 307, 982, 939, 486, 122, 567, 787, 203, 692, 61, 92, 897, 542, 197, 468, 465, 717, 773, 938, 611, 304, 101, 541, 140, 998, 582, 869, 179, 224, 207, 194, 82, 396, 820, 275, 490, 226, 684, 793, 427, 577, 596, 361, 56, 672, 341, 631, 602, 907, 362, 939, 320, 765, 729, 226, 205, 440, 798, 488, 540, 697, 607, 979, 484, 867, 10, 501, 722, 922, 978, 238, 33, 980, 510, 33, 707, 740, 485, 467, 656, 950, 266, 272, 862, 268, 873, 316, 666, 593, 69, 49, 428, 196, 252, 729, 970, 617, 876, 188, 662, 840, 909, 680, 929, 123, 906, 339, 254, 695, 518, 465, 955, 331, 831, 589, 431, 335, 116, 215, 994, 693, 834, 128, 853, 928, 810, 836, 727, 781, 63, 90, 863, 296, 804, 815, 41, 586, 342, 738, 362, 533, 62, 970, 74, 603, 94, 96, 364, 663, 298, 634, 500, 661, 194, 968, 6, 780, 826, 0, 313, 69, 611, 473, 632, 428, 602, 658, 526, 15, 547, 844, 992, 378, 852, 460, 631, 863, 54, 250, 833, 713, 472, 64, 482, 429, 590, 202, 102, 836, 809, 261, 759, 342, 424, 293, 921, 588, 338, 646, 0, 436, 569, 348, 115, 453, 641, 121, 808, 734, 336, 143, 726, 576, 166, 600, 596, 547, 990, 203, 837, 400, 556, 690, 206, 286, 84, 650, 953, 559, 538, 42, 525, 407, 249, 397, 143, 123, 949, 29, 787, 468, 393, 367, 499, 666, 534, 183, 175, 824, 697, 374, 598, 134, 809, 600, 880, 879, 142, 828, 369, 991, 167, 249, 195, 294, 618, 318, 327, 769, 456, 473, 598, 961, 416, 368, 6, 188, 191, 539, 751, 901, 474, 129, 861, 164, 444, 390, 598, 649, 517, 264, 980, 120, 659, 796, 301, 144, 172, 205, 48, 216, 856, 406, 367, 224, 776, 637, 718, 440, 593, 692, 688, 602, 76, 467, 516, 38, 387, 31, 849, 227, 720, 678, 252, 192, 492, 477, 301, 619, 67, 862, 15, 985, 491, 535, 44, 68, 761, 637, 387, 807, 671, 157, 55, 825, 575, 378, 43, 191, 280, 263, 757, 141, 355, 820, 495, 178, 154, 175, 731, 298, 335, 98, 373, 731, 676, 702, 111, 540, 423, 448, 276, 749, 643, 42, 555, 562, 622, 426, 616, 114, 433, 109, 339, 804, 104, 874, 630, 670, 40, 866, 914, 586, 906, 89, 471, 573, 783, 323, 148, 872, 267, 502, 768, 832, 986, 8, 497, 313, 265, 932, 555, 727, 558, 617, 865, 226, 759, 569, 626, 801, 72, 440, 500, 556, 533, 689, 843, 554, 570, 982, 778, 298, 278, 744, 847, 930, 340, 507, 817, 96, 377, 317, 405, 107, 310, 186, 27, 288, 224, 245, 813, 214, 696, 347, 800, 826, 2, 212, 298, 296, 164, 943, 742, 282, 153, 257, 449, 814, 770, 934, 885, 251, 752, 530, 424, 755, 34, 393, 245, 346, 661, 554, 330, 325, 168, 564, 601, 930, 943, 20, 928, 128, 209, 520, 931, 433, 574, 123, 953, 53, 737, 213, 517, 289, 359, 562, 462, 166, 923, 45, 792, 609, 966, 951, 635, 610, 613, 417, 113, 589, 655, 518, 870, 750, 5, 757, 42, 231, 598, 990, 180, 911, 439, 192, 609, 448, 36, 40, 965, 606, 102, 434, 7 };
            int [] expectedResult = { 0, 0, 2, 5, 6, 6, 7, 8, 10, 15, 15, 20, 27, 29, 31, 33, 33, 34, 36, 38, 40, 40, 41, 42, 42, 42, 43, 44, 45, 48, 49, 51, 53, 54, 54, 55, 56, 61, 62, 63, 64, 66, 67, 68, 69, 69, 72, 74, 76, 82, 84, 89, 90, 92, 94, 94, 96, 96, 98, 101, 102, 102, 104, 104, 107, 109, 111, 113, 114, 115, 116, 118, 120, 121, 122, 123, 123, 123, 128, 128, 129, 134, 140, 141, 142, 143, 143, 144, 148, 153, 154, 156, 157, 164, 164, 166, 166, 166, 167, 168, 170, 172, 173, 175, 175, 178, 179, 180, 183, 186, 188, 188, 191, 191, 192, 192, 194, 194, 195, 196, 197, 202, 203, 203, 205, 205, 206, 207, 209, 212, 213, 214, 215, 216, 224, 224, 224, 226, 226, 226, 227, 231, 237, 237, 238, 238, 245, 245, 249, 249, 250, 251, 252, 252, 254, 255, 257, 261, 263, 264, 265, 266, 267, 268, 272, 275, 276, 278, 280, 282, 286, 288, 288, 289, 293, 294, 296, 296, 298, 298, 298, 298, 301, 301, 304, 307, 310, 313, 313, 316, 317, 317, 318, 318, 320, 323, 325, 327, 330, 331, 335, 335, 336, 338, 339, 339, 340, 340, 341, 342, 342, 342, 346, 347, 348, 350, 350, 355, 359, 361, 362, 362, 364, 365, 367, 367, 368, 369, 373, 374, 376, 377, 378, 378, 387, 387, 390, 393, 393, 396, 397, 400, 405, 406, 407, 416, 417, 423, 424, 424, 426, 427, 428, 428, 429, 431, 433, 433, 434, 436, 439, 440, 440, 440, 444, 448, 448, 449, 453, 456, 458, 460, 462, 463, 465, 465, 467, 467, 468, 468, 468, 471, 472, 473, 473, 473, 474, 477, 482, 484, 485, 486, 488, 490, 491, 492, 495, 497, 499, 500, 500, 501, 502, 507, 510, 516, 517, 517, 518, 518, 520, 525, 526, 530, 530, 533, 533, 534, 535, 538, 539, 540, 540, 541, 542, 544, 547, 547, 554, 554, 555, 555, 555, 556, 556, 556, 558, 559, 562, 562, 564, 567, 569, 569, 570, 573, 574, 575, 576, 577, 580, 582, 582, 586, 586, 588, 589, 589, 590, 593, 593, 596, 596, 598, 598, 598, 598, 600, 600, 601, 602, 602, 602, 603, 606, 607, 609, 609, 610, 611, 611, 613, 616, 617, 617, 618, 619, 622, 626, 630, 631, 631, 631, 632, 634, 634, 634, 635, 637, 637, 637, 641, 642, 643, 645, 646, 649, 650, 655, 656, 656, 658, 659, 660, 661, 661, 662, 663, 666, 666, 669, 670, 671, 672, 676, 678, 680, 684, 688, 689, 689, 690, 692, 692, 693, 695, 696, 697, 697, 702, 704, 707, 713, 717, 718, 720, 722, 723, 726, 727, 727, 729, 729, 731, 731, 734, 736, 737, 738, 740, 742, 744, 749, 750, 751, 752, 755, 755, 757, 757, 759, 759, 761, 765, 765, 768, 769, 770, 773, 776, 778, 780, 780, 781, 783, 784, 786, 787, 787, 792, 793, 796, 798, 799, 800, 800, 801, 804, 804, 807, 808, 809, 809, 810, 813, 814, 815, 817, 820, 820, 824, 825, 826, 826, 827, 828, 831, 832, 833, 834, 836, 836, 837, 840, 843, 844, 845, 847, 849, 852, 853, 856, 861, 862, 862, 863, 863, 864, 865, 866, 867, 869, 870, 872, 873, 873, 874, 876, 878, 879, 879, 880, 885, 887, 892, 897, 901, 906, 906, 906, 907, 909, 911, 914, 915, 921, 922, 923, 928, 928, 929, 930, 930, 931, 932, 933, 934, 938, 939, 939, 941, 943, 943, 949, 950, 951, 953, 953, 955, 961, 965, 966, 968, 970, 970, 976, 978, 979, 980, 980, 982, 982, 985, 986, 990, 990, 991, 992, 994, 995, 998 };
            Sorting.MergeSort(initialArr, 0, initialArr.Length - 1);
            for (int i = 0; i < initialArr.Length; i++)
            {
                if (initialArr[i] != expectedResult[i])
                {
                    Assert.Fail();
                }
            }
        }

        /// <summary>
        /// A test for MergeSort
        /// </summary>
        [TestMethod]
        public void DoMergeSort_2()
        {
            int[] initialArr = { 242, 687, 170, 497, 908, 214, 721, 843, 309, 567, 108, 877, 623, 838, 270, 299, 598, 460, 746, 983, 829, 715, 377, 922, 229, 903, 600, 720, 523, 281, 25, 707, 15, 628, 421, 128, 551, 470, 247, 316, 392, 119, 942, 35, 116, 425, 26, 713, 784, 294, 225, 369, 146, 35, 280, 526, 310, 247, 268, 5, 614, 0, 319, 27, 542, 400, 862, 995, 417, 142, 748, 127, 213, 430, 591, 710, 773, 342, 806, 804, 877, 887, 935, 229, 56, 655, 561, 979, 347, 894, 818, 303, 202, 242, 702, 391, 799, 914, 492, 715, 563, 30, 295, 642, 545, 97, 156, 715, 444 };
            int[] expectedResult = { 0, 5, 15, 25, 26, 27, 30, 35, 35, 56, 97, 108, 116, 119, 127, 128, 142, 146, 156, 170, 202, 213, 214, 225, 229, 229, 242, 242, 247, 247, 268, 270, 280, 281, 294, 295, 299, 303, 309, 310, 316, 319, 342, 347, 369, 377, 391, 392, 400, 417, 421, 425, 430, 444, 460, 470, 492, 497, 523, 526, 542, 545, 551, 561, 563, 567, 591, 598, 600, 614, 623, 628, 642, 655, 687, 702, 707, 710, 713, 715, 715, 715, 720, 721, 746, 748, 773, 784, 799, 804, 806, 818, 829, 838, 843, 862, 877, 877, 887, 894, 903, 908, 914, 922, 935, 942, 979, 983, 995 };
            Sorting.MergeSort(initialArr, 0, initialArr.Length - 1);
            for (int i = 0; i < initialArr.Length; i++)
            {
                if (initialArr[i] != expectedResult[i])
                {
                    Assert.Fail();
                }
            }
        }

        /// <summary>
        /// A test for MergeSort
        /// </summary>
        [TestMethod]
        public void DoMergeSort_3()
        {
            int[] initialArr = { 355, 166, 521, 282, 744, 266, 589, 193, 546, 102, 212, 255, 43, 240, 558, 511, 238, 348, 544, 619, 693, 532, 128, 278, 61, 842, 271, 175, 705, 485, 479, 342, 59, 392, 40, 517, 394, 113, 958, 435, 721, 491, 115, 910, 426, 888, 804, 93, 475, 232, 70, 682, 255, 417, 667, 822, 37, 243, 220, 902, 995, 413, 488, 61, 623, 870, 196, 651, 200, 40, 117, 124, 390, 108, 897, 201, 417, 217, 851, 173, 37, 178, 700, 473, 415, 797, 86, 641, 724, 218, 479, 151, 892, 55, 440, 307, 3, 54, 287, 556, 691, 153, 893, 434, 115, 945, 291, 146, 520, 465, 405, 820, 391, 47, 865, 817, 713, 14, 646, 826, 784, 554, 926, 981, 561, 966, 232, 334, 668, 589, 197, 363, 929, 295, 481, 884, 284, 265, 358, 469, 505, 939, 121, 259, 812, 659, 759, 844, 190, 623, 594, 988, 408, 461, 771, 136, 226, 911, 873, 148, 712, 957, 478, 931, 267, 41, 890, 95, 566, 980, 532, 447, 656, 176, 320, 845, 433, 667, 169, 902, 206, 388, 144, 44, 994, 209, 955, 468, 524, 344, 658, 373, 392, 209, 756, 548, 460, 190, 991, 771, 768, 664, 277, 209, 91, 146, 332, 231, 140, 926, 703, 558, 742, 971, 942, 324, 813, 434, 936, 58, 86, 421, 571, 221, 322, 158, 55, 447, 419, 772, 384, 243, 676, 397, 133, 542, 110, 934, 953, 848, 877, 723, 328, 597, 641, 99, 631, 420, 267, 432, 734, 26, 253, 932, 684, 346, 92, 56, 886, 933, 91, 884, 811, 367, 542, 459, 881, 344, 837, 399, 214, 878, 480, 88, 181, 363, 93, 973, 580, 222, 526, 635, 179, 987, 37, 357, 989, 743, 713, 787, 449, 54, 48, 19, 757, 992, 911, 960, 55, 181, 218, 287, 582, 867, 218, 856, 545, 165, 751, 320, 252, 118, 475, 663, 406, 455, 705, 824, 329, 184, 469, 137, 630, 50, 950, 159, 830, 461, 330, 189, 451, 133, 918, 398, 4, 239, 52, 311, 769, 181, 812, 824, 992, 392, 534, 330, 578, 384, 613, 301, 287, 87, 630, 871, 711, 80, 656, 531, 917, 58 };
            int[] expectedResult = { 3, 4, 14, 19, 26, 37, 37, 37, 40, 40, 41, 43, 44, 47, 48, 50, 52, 54, 54, 55, 55, 55, 56, 58, 58, 59, 61, 61, 70, 80, 86, 86, 87, 88, 91, 91, 92, 93, 93, 95, 99, 102, 108, 110, 113, 115, 115, 117, 118, 121, 124, 128, 133, 133, 136, 137, 140, 144, 146, 146, 148, 151, 153, 158, 159, 165, 166, 169, 173, 175, 176, 178, 179, 181, 181, 181, 184, 189, 190, 190, 193, 196, 197, 200, 201, 206, 209, 209, 209, 212, 214, 217, 218, 218, 218, 220, 221, 222, 226, 231, 232, 232, 238, 239, 240, 243, 243, 252, 253, 255, 255, 259, 265, 266, 267, 267, 271, 277, 278, 282, 284, 287, 287, 287, 291, 295, 301, 307, 311, 320, 320, 322, 324, 328, 329, 330, 330, 332, 334, 342, 344, 344, 346, 348, 355, 357, 358, 363, 363, 367, 373, 384, 384, 388, 390, 391, 392, 392, 392, 394, 397, 398, 399, 405, 406, 408, 413, 415, 417, 417, 419, 420, 421, 426, 432, 433, 434, 434, 435, 440, 447, 447, 449, 451, 455, 459, 460, 461, 461, 465, 468, 469, 469, 473, 475, 475, 478, 479, 479, 480, 481, 485, 488, 491, 505, 511, 517, 520, 521, 524, 526, 531, 532, 532, 534, 542, 542, 544, 545, 546, 548, 554, 556, 558, 558, 561, 566, 571, 578, 580, 582, 589, 589, 594, 597, 613, 619, 623, 623, 630, 630, 631, 635, 641, 641, 646, 651, 656, 656, 658, 659, 663, 664, 667, 667, 668, 676, 682, 684, 691, 693, 700, 703, 705, 705, 711, 712, 713, 713, 721, 723, 724, 734, 742, 743, 744, 751, 756, 757, 759, 768, 769, 771, 771, 772, 784, 787, 797, 804, 811, 812, 812, 813, 817, 820, 822, 824, 824, 826, 830, 837, 842, 844, 845, 848, 851, 856, 865, 867, 870, 871, 873, 877, 878, 881, 884, 884, 886, 888, 890, 892, 893, 897, 902, 902, 910, 911, 911, 917, 918, 926, 926, 929, 931, 932, 933, 934, 936, 939, 942, 945, 950, 953, 955, 957, 958, 960, 966, 971, 973, 980, 981, 987, 988, 989, 991, 992, 992, 994, 995 };
            Sorting.MergeSort(initialArr, 0, initialArr.Length - 1);
            for (int i = 0; i < initialArr.Length; i++)
            {
                if (initialArr[i] != expectedResult[i])
                {
                    Assert.Fail();
                }
            }
        }

        /// <summary>
        /// A test for MergeSort
        /// </summary>
        [TestMethod]
        public void DoMergeSort_4()
        {
            int[] initialArr = { 224, 877, 435, 709, 163, 53, 404, 328, 503, 871, 206, 809, 331, 135, 343, 118, 177, 410, 952, 466, 571, 136, 456, 605, 336, 618, 137, 827, 308, 522, 736, 539, 747, 688, 144, 418, 834, 137, 137, 995, 674, 483, 277, 504, 106, 509, 734, 361, 191, 958, 351, 585, 352, 860 };
            int[] expectedResult = { 53, 106, 118, 135, 136, 137, 137, 137, 144, 163, 177, 191, 206, 224, 277, 308, 328, 331, 336, 343, 351, 352, 361, 404, 410, 418, 435, 456, 466, 483, 503, 504, 509, 522, 539, 571, 585, 605, 618, 674, 688, 709, 734, 736, 747, 809, 827, 834, 860, 871, 877, 952, 958, 995 };
            Sorting.MergeSort(initialArr, 0, initialArr.Length - 1);
            for (int i = 0; i < initialArr.Length; i++)
            {
                if (initialArr[i] != expectedResult[i])
                {
                    Assert.Fail();
                }
            }
        }

        /// <summary>
        /// A test for MergeSort
        /// </summary>
        [TestMethod]
        public void DoMergeSort_5()
        {
            int[] initialArr = { 919, 60, 850, 933, 146, 222, 431, 308, 403, 658, 697, 808, 655, 335, 335, 844, 97, 844, 147, 592, 496, 840, 45, 173, 627, 374, 51, 247, 193, 428, 950, 973, 148, 275, 838, 672, 738, 877, 222, 278, 120, 637, 87, 939, 196, 952, 984, 925, 305, 816, 562, 213, 612, 64, 916, 78, 15, 676, 306, 771, 170, 184, 114, 974, 708, 724, 659, 380, 496, 663, 106, 220, 621, 869, 471, 859, 753, 105, 977, 674, 389, 126, 941, 376, 866, 736, 360, 84, 359, 759, 657, 61, 570, 450, 107, 935, 522, 113, 231, 472, 293, 604, 428, 642, 710, 342, 592, 743, 592, 57, 325, 909, 699, 632, 382, 43, 243, 737, 108, 971, 363, 575, 21, 736, 6, 44, 649, 170, 761, 536, 336, 640, 874, 504, 380, 784, 698, 299, 666, 523, 144, 617, 491, 301, 434, 747, 361, 938, 68, 64, 692, 785, 4, 260, 108, 718, 583, 691, 635, 666, 692, 421, 981, 56, 720, 685, 35, 194, 251, 597, 345, 944, 71, 584, 826, 745, 83, 719, 302, 258, 682, 710, 102, 697, 844, 551, 635, 613, 396, 662, 201, 7, 663, 999, 831, 723, 635, 435, 581, 749, 712, 166, 687, 471, 719, 747, 713, 420, 434, 362, 634, 864, 388, 377, 983, 981, 319, 284, 212, 169, 49, 421, 798, 588, 395, 338, 281, 72, 752, 103, 110, 648, 138, 553, 546, 515, 23, 630, 977, 96, 837, 215, 179, 34, 28, 337, 618, 286, 16, 850, 403, 351, 223, 411, 699, 290, 368, 99, 75, 381, 466, 641, 667, 330, 252, 986, 725, 835, 830, 467, 958, 688, 306, 116, 331, 834, 242, 764, 559, 58, 719, 995, 56, 902, 699, 758, 424, 727, 854, 256, 147, 923, 555, 596, 629, 196, 548, 848, 781, 41, 611, 783, 455, 548, 892, 715, 44, 107, 79, 865, 47, 604, 539, 16, 661, 471, 585, 764, 630, 493, 561, 998, 980, 573, 320, 34, 132, 710, 486, 135, 286, 394, 982, 517, 447, 936, 539, 507, 10, 984, 714, 317, 647, 989, 209, 542, 384, 539, 935, 157, 611, 783, 217, 288, 480, 612, 802, 882, 227, 858, 582, 334, 620, 943, 579, 653, 622, 21, 569, 725, 932, 77, 754, 646, 779, 243, 351, 991, 364, 777, 650, 593, 774, 328, 524, 502, 176, 693, 37, 835, 134, 657, 280, 151, 402, 380, 697, 704, 410, 555, 920, 362, 970, 210, 225, 533, 28, 571, 509, 236, 261, 810 };
            int[] expectedResult = { 4, 6, 7, 10, 15, 16, 16, 21, 21, 23, 28, 28, 34, 34, 35, 37, 41, 43, 44, 44, 45, 47, 49, 51, 56, 56, 57, 58, 60, 61, 64, 64, 68, 71, 72, 75, 77, 78, 79, 83, 84, 87, 96, 97, 99, 102, 103, 105, 106, 107, 107, 108, 108, 110, 113, 114, 116, 120, 126, 132, 134, 135, 138, 144, 146, 147, 147, 148, 151, 157, 166, 169, 170, 170, 173, 176, 179, 184, 193, 194, 196, 196, 201, 209, 210, 212, 213, 215, 217, 220, 222, 222, 223, 225, 227, 231, 236, 242, 243, 243, 247, 251, 252, 256, 258, 260, 261, 275, 278, 280, 281, 284, 286, 286, 288, 290, 293, 299, 301, 302, 305, 306, 306, 308, 317, 319, 320, 325, 328, 330, 331, 334, 335, 335, 336, 337, 338, 342, 345, 351, 351, 359, 360, 361, 362, 362, 363, 364, 368, 374, 376, 377, 380, 380, 380, 381, 382, 384, 388, 389, 394, 395, 396, 402, 403, 403, 410, 411, 420, 421, 421, 424, 428, 428, 431, 434, 434, 435, 447, 450, 455, 466, 467, 471, 471, 471, 472, 480, 486, 491, 493, 496, 496, 502, 504, 507, 509, 515, 517, 522, 523, 524, 533, 536, 539, 539, 539, 542, 546, 548, 548, 551, 553, 555, 555, 559, 561, 562, 569, 570, 571, 573, 575, 579, 581, 582, 583, 584, 585, 588, 592, 592, 592, 593, 596, 597, 604, 604, 611, 611, 612, 612, 613, 617, 618, 620, 621, 622, 627, 629, 630, 630, 632, 634, 635, 635, 635, 637, 640, 641, 642, 646, 647, 648, 649, 650, 653, 655, 657, 657, 658, 659, 661, 662, 663, 663, 666, 666, 667, 672, 674, 676, 682, 685, 687, 688, 691, 692, 692, 693, 697, 697, 697, 698, 699, 699, 699, 704, 708, 710, 710, 710, 712, 713, 714, 715, 718, 719, 719, 719, 720, 723, 724, 725, 725, 727, 736, 736, 737, 738, 743, 745, 747, 747, 749, 752, 753, 754, 758, 759, 761, 764, 764, 771, 774, 777, 779, 781, 783, 783, 784, 785, 798, 802, 808, 810, 816, 826, 830, 831, 834, 835, 835, 837, 838, 840, 844, 844, 844, 848, 850, 850, 854, 858, 859, 864, 865, 866, 869, 874, 877, 882, 892, 902, 909, 916, 919, 920, 923, 925, 932, 933, 935, 935, 936, 938, 939, 941, 943, 944, 950, 952, 958, 970, 971, 973, 974, 977, 977, 980, 981, 981, 982, 983, 984, 984, 986, 989, 991, 995, 998, 999 };
            Sorting.MergeSort(initialArr, 0, initialArr.Length - 1);
            for (int i = 0; i < initialArr.Length; i++)
            {
                if (initialArr[i] != expectedResult[i])
                {
                    Assert.Fail();
                }
            }
        }

        /// <summary>
        /// A test for QuickSort
        /// </summary>
        [TestMethod]
        public void DoQuickSort_1()
        {
            int[] initialArr = { 500, 765, 914, 373, 292, 339, 590, 937, 66, 911, 84, 428, 559, 132, 40, 358, 377, 388, 544, 81, 558, 727, 884, 386, 86, 192, 294, 211, 897, 131, 711, 772, 505, 98, 912, 537, 799, 974, 596, 441, 235, 419, 725, 499, 976, 933, 457, 108, 729, 737, 928, 529, 762, 886, 962, 773, 881, 527, 286, 100, 44, 378, 40, 934, 200, 312, 923, 461, 220, 503, 558, 402, 792, 103, 846, 138, 2, 384, 409, 152, 734, 186, 481, 159, 202, 182, 10, 619, 135, 138, 655, 271, 688, 495, 397, 856, 379, 790, 299, 664, 10, 996, 887, 226, 178, 525, 736, 659, 39, 823, 771, 497, 118, 134, 365, 857, 897, 880, 731, 18, 301, 303, 325, 81, 848, 287, 714, 296, 705, 989, 759, 211, 84, 744, 142, 738, 298, 255, 980, 677, 445, 350, 579, 311, 367, 157, 152, 553, 130, 539, 959, 498, 59, 280, 362, 706, 670, 806, 378, 891, 810, 439, 953, 50, 63, 559, 412, 373, 991, 626, 559, 642, 899, 54, 572, 951, 724, 14, 714, 690, 134, 160, 166, 166, 30, 261, 152, 803, 381, 435, 68, 492, 877, 89, 866, 6, 396, 529, 248, 807, 745, 779, 562, 503, 980, 316, 599, 4, 708, 411, 982, 656, 92, 687, 756, 649, 273, 787, 19, 802, 407, 609, 992, 555, 557, 66, 764, 809, 187, 566, 554, 195, 765, 906, 944, 355, 598, 662, 186, 713, 661, 147, 95, 970, 453, 412, 400, 189, 333, 216, 732, 609, 509, 445, 400, 135, 787, 6, 945, 913, 551, 789, 816, 141, 857, 786, 890, 185, 743, 400, 51, 610, 600, 306, 140, 259, 513, 21, 101, 145, 666, 575, 476, 971, 833, 944, 685, 320, 505, 809, 568, 592, 716, 272, 161, 872, 330, 954, 113, 666, 522, 214, 446, 932, 165, 122, 9, 203, 304, 141, 622, 765, 904, 800, 247, 976, 312, 845, 307, 912, 101, 569, 680, 933, 832, 458, 893, 327, 144, 268, 928, 559, 908, 434, 623, 451, 129, 544, 806, 711, 935, 482, 15, 363, 186, 803, 688, 916, 25, 185, 559, 485, 647, 200, 565, 952, 534, 512, 100, 706, 228, 681, 58, 36, 213, 63, 856, 469, 177, 796, 847, 768, 39, 595, 977, 619, 554, 316, 747, 28, 770, 977, 302, 959, 708, 442, 912, 707, 869, 670, 916, 616, 444, 100, 482, 253, 423, 978, 150, 123, 946, 218, 738, 229, 338, 790, 446, 51, 223, 946, 397, 218, 765, 71, 935, 251, 379, 98, 328, 770, 151, 149, 599, 506, 879, 230, 324, 939, 113, 723, 195, 576, 165, 623, 82, 551, 238, 73, 621, 917, 996, 860, 484, 922, 272, 698, 851, 372, 164, 231, 874, 324, 650, 380, 972, 797, 618, 231, 349, 108, 466, 507, 938, 500, 751, 821, 52, 141, 989, 383, 12, 305, 477, 410, 773, 290, 665, 676, 233, 181, 378, 952, 774, 881, 848, 870, 925, 785, 651, 284, 932, 6, 723, 513, 451, 489, 922, 984, 171, 451, 645, 710, 383, 780, 218, 568, 847, 240, 606, 682, 132, 941, 997, 168, 729, 514, 732, 56, 651, 880 };
            int[] expectedResult = { 2, 4, 6, 6, 6, 9, 10, 10, 12, 14, 15, 18, 19, 21, 25, 28, 30, 36, 39, 39, 40, 40, 44, 50, 51, 51, 52, 54, 56, 58, 59, 63, 63, 66, 66, 68, 71, 73, 81, 81, 82, 84, 84, 86, 89, 92, 95, 98, 98, 100, 100, 100, 101, 101, 103, 108, 108, 113, 113, 118, 122, 123, 129, 130, 131, 132, 132, 134, 134, 135, 135, 138, 138, 140, 141, 141, 141, 142, 144, 145, 147, 149, 150, 151, 152, 152, 152, 157, 159, 160, 161, 164, 165, 165, 166, 166, 168, 171, 177, 178, 181, 182, 185, 185, 186, 186, 186, 187, 189, 192, 195, 195, 200, 200, 202, 203, 211, 211, 213, 214, 216, 218, 218, 218, 220, 223, 226, 228, 229, 230, 231, 231, 233, 235, 238, 240, 247, 248, 251, 253, 255, 259, 261, 268, 271, 272, 272, 273, 280, 284, 286, 287, 290, 292, 294, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 311, 312, 312, 316, 316, 320, 324, 324, 325, 327, 328, 330, 333, 338, 339, 349, 350, 355, 358, 362, 363, 365, 367, 372, 373, 373, 377, 378, 378, 378, 379, 379, 380, 381, 383, 383, 384, 386, 388, 396, 397, 397, 400, 400, 400, 402, 407, 409, 410, 411, 412, 412, 419, 423, 428, 434, 435, 439, 441, 442, 444, 445, 445, 446, 446, 451, 451, 451, 453, 457, 458, 461, 466, 469, 476, 477, 481, 482, 482, 484, 485, 489, 492, 495, 497, 498, 499, 500, 500, 503, 503, 505, 505, 506, 507, 509, 512, 513, 513, 514, 522, 525, 527, 529, 529, 534, 537, 539, 544, 544, 551, 551, 553, 554, 554, 555, 557, 558, 558, 559, 559, 559, 559, 559, 562, 565, 566, 568, 568, 569, 572, 575, 576, 579, 590, 592, 595, 596, 598, 599, 599, 600, 606, 609, 609, 610, 616, 618, 619, 619, 621, 622, 623, 623, 626, 642, 645, 647, 649, 650, 651, 651, 655, 656, 659, 661, 662, 664, 665, 666, 666, 670, 670, 676, 677, 680, 681, 682, 685, 687, 688, 688, 690, 698, 705, 706, 706, 707, 708, 708, 710, 711, 711, 713, 714, 714, 716, 723, 723, 724, 725, 727, 729, 729, 731, 732, 732, 734, 736, 737, 738, 738, 743, 744, 745, 747, 751, 756, 759, 762, 764, 765, 765, 765, 765, 768, 770, 770, 771, 772, 773, 773, 774, 779, 780, 785, 786, 787, 787, 789, 790, 790, 792, 796, 797, 799, 800, 802, 803, 803, 806, 806, 807, 809, 809, 810, 816, 821, 823, 832, 833, 845, 846, 847, 847, 848, 848, 851, 856, 856, 857, 857, 860, 866, 869, 870, 872, 874, 877, 879, 880, 880, 881, 881, 884, 886, 887, 890, 891, 893, 897, 897, 899, 904, 906, 908, 911, 912, 912, 912, 913, 914, 916, 916, 917, 922, 922, 923, 925, 928, 928, 932, 932, 933, 933, 934, 935, 935, 937, 938, 939, 941, 944, 944, 945, 946, 946, 951, 952, 952, 953, 954, 959, 959, 962, 970, 971, 972, 974, 976, 976, 977, 977, 978, 980, 980, 982, 984, 989, 989, 991, 992, 996, 996, 997 };
            Sorting.QuickSort(initialArr, 0, initialArr.Length - 1);
            for (int i = 0; i < initialArr.Length; i++)
            {
                if (initialArr[i] != expectedResult[i])
                {
                    Assert.Fail();
                }
            }
        }

        /// <summary>
        /// A test for QuickSort
        /// </summary>
        [TestMethod]
        public void DoQuickSort_2()
        {
            int[] initialArr = { 788, 771, 764, 361, 565, 8, 246, 443, 359, 427, 691, 361, 943, 229, 121, 451, 37, 906, 554, 438, 374, 444, 373, 500, 902, 150, 918, 898, 796, 465, 207, 170, 837, 571, 942, 573, 178, 901, 401, 837, 73, 628, 249, 532, 876, 574, 914, 193, 21, 542, 843, 117, 709, 507, 731, 343, 398, 263, 458, 414, 90, 347, 647, 894, 219, 520, 524, 371, 287, 547, 272, 136, 504, 717, 365, 745, 195, 840, 624, 328, 236, 724, 877, 253, 621, 90, 461, 329, 839, 598, 175, 915, 442, 987, 747, 725, 981, 354, 313, 355, 49, 542, 906, 473, 269, 707 };
            int[] expectedResult = { 8, 21, 37, 49, 73, 90, 90, 117, 121, 136, 150, 170, 175, 178, 193, 195, 207, 219, 229, 236, 246, 249, 253, 263, 269, 272, 287, 313, 328, 329, 343, 347, 354, 355, 359, 361, 361, 365, 371, 373, 374, 398, 401, 414, 427, 438, 442, 443, 444, 451, 458, 461, 465, 473, 500, 504, 507, 520, 524, 532, 542, 542, 547, 554, 565, 571, 573, 574, 598, 621, 624, 628, 647, 691, 707, 709, 717, 724, 725, 731, 745, 747, 764, 771, 788, 796, 837, 837, 839, 840, 843, 876, 877, 894, 898, 901, 902, 906, 906, 914, 915, 918, 942, 943, 981, 987 };
            Sorting.QuickSort(initialArr, 0, initialArr.Length - 1);
            for (int i = 0; i < initialArr.Length; i++)
            {
                if (initialArr[i] != expectedResult[i])
                {
                    Assert.Fail();
                }
            }
        }

        /// <summary>
        /// A test for QuickSort
        /// </summary>
        [TestMethod]
        public void DoQuickSort_3()
        {
            int[] initialArr = { 178, 139, 594, 809, 529, 346, 300, 402, 159, 2, 674, 360, 591, 628, 105, 903, 877, 772, 945, 690, 225, 852, 552, 636, 484, 662, 745, 737, 567, 278, 636, 38, 639, 745, 329, 80, 986, 381, 571, 403, 963, 937, 870, 404, 56, 461, 415, 319, 250, 260, 266, 373, 228, 914, 598, 325, 586, 957, 324, 866, 600, 562, 834, 881, 365, 635, 720, 846, 299, 25, 916, 496, 201, 541, 727, 287, 982, 147, 580, 22, 247, 425, 486, 307, 12, 263, 809, 724, 146, 4, 493, 29, 56, 704, 803, 400, 102, 989, 38, 420, 740, 569, 20, 225, 343, 769, 172, 686, 187, 310, 342, 439, 377, 301, 619, 174, 76, 527, 868, 102, 826, 996, 699, 295, 531, 887, 439, 496, 738, 326, 184, 992, 109, 159, 282, 677, 405, 261, 963, 242, 90, 122, 536, 835, 661, 54, 651, 754, 84, 628, 324, 575, 120, 935, 594, 744, 870, 725, 694, 456, 330, 676, 948, 861, 126, 349, 329, 218, 19, 942, 769, 814, 563, 625, 12, 703, 459, 863, 633, 476, 235, 684, 411, 110, 1, 609, 872, 173, 564, 538, 807, 680, 566, 507, 912, 414, 174, 675, 709, 311, 725, 433, 735, 142, 859, 509, 11, 495, 923, 891, 284, 7, 91, 218, 220, 645, 264, 837, 859, 516, 477, 156, 653, 481, 135, 88, 248, 56, 713, 598, 528, 784, 153, 322, 751, 802, 948, 268, 250, 491, 598, 376, 250, 672, 253, 800, 589, 347, 286, 267, 149, 336, 815, 193, 833, 569, 779, 254, 7, 770, 261, 954, 781, 325, 363, 500, 853, 768, 467, 418, 696, 996, 586, 367, 918, 100, 905, 981, 227, 334, 499, 900, 769, 446, 448, 191, 968, 960, 488, 182, 22, 694, 260, 480, 230, 643, 594, 924, 309, 753, 946, 820, 880, 868, 570, 153, 749, 448, 275, 732, 663, 798, 27, 672, 271, 360, 184, 335, 876, 171, 532, 893, 280, 285, 395, 2, 735, 106, 137, 274, 505, 980, 671, 473, 388, 678, 20, 901, 875, 294, 441, 520, 684, 755, 518, 224, 666, 587, 208, 870, 458, 259, 47, 137, 221, 53, 540, 595, 473, 568, 418, 643, 310, 0, 226, 682, 126, 553, 284, 592, 340, 283, 460, 582, 730, 11, 208, 524, 766, 170, 335, 147, 897, 266, 815, 246, 932, 534, 252, 334, 138, 425, 427, 307, 876, 798, 209, 684, 528, 836, 98, 113, 303, 616, 530, 175, 799, 465, 407, 209, 845, 16, 828, 302, 232, 271, 745, 44, 184, 980, 749, 591, 301, 949, 454, 914, 855, 152, 705, 931, 802, 524, 995, 930, 72, 222, 843, 281, 736, 640, 447, 466, 126, 42, 489, 121, 596, 125, 74, 605, 52, 165, 499, 548, 86, 506, 811, 353, 161, 615, 319, 646, 760, 475, 406, 320, 20, 897, 230, 10, 427, 463, 307, 544, 532, 282, 465, 258, 459, 332, 318, 730, 77, 100, 878, 637, 25, 446, 843, 566, 410, 490, 120, 121, 320, 801, 706, 651, 636, 168, 101, 698, 895, 64, 178, 588, 857, 954, 16, 803, 41, 553, 893, 828, 297, 589, 568, 660, 596, 769, 295, 574, 54, 663, 600, 936, 343, 186, 223, 731, 576, 813, 622, 291, 231, 619, 834, 13, 921, 290, 780, 70, 429, 40, 525, 857, 596, 291, 824, 731, 232, 46, 54, 866, 873, 527, 644, 231, 463, 241, 245, 670, 731, 285, 227, 227, 931, 602, 596, 677, 754, 554, 738, 306, 988, 225, 144, 14, 138, 743, 340, 51, 362, 491, 498, 529, 759, 755, 417, 704, 974, 603, 549, 680, 44, 109, 338, 144, 812, 298, 926, 993, 695, 146, 976, 677, 308, 747, 877, 647, 382, 630, 93, 720, 901, 193, 308, 239, 787, 697, 467, 175, 184, 892, 703, 151, 4, 57, 261, 879, 887, 999, 201, 840, 817, 346, 356, 215, 515, 820, 221, 11, 877, 770, 321, 343, 509, 829, 779, 850, 801, 98, 357, 114, 830, 750, 809, 803, 443, 825, 672, 250, 485, 998, 760, 383, 429, 252, 903, 554, 837, 92, 724, 966, 476, 455, 297, 413, 570, 359, 641, 175, 278, 411, 77, 788, 642, 87, 10, 66, 537, 553, 772, 690, 147, 971, 526, 879, 10, 938, 914, 257, 925, 224, 13, 709, 374, 390, 638, 374, 452, 395, 232, 84, 183, 497, 971, 74, 920, 971, 740, 341, 242, 837, 17, 284, 320, 34, 818, 504, 929, 418, 403, 632, 444, 384, 250, 53, 397, 368, 413, 251, 448, 635, 613, 141, 320, 688, 506, 650, 999, 451, 958, 38, 197, 573, 14, 88, 207, 729, 389, 340, 571, 133, 444, 34, 991, 600, 640, 798, 246, 918, 677, 551, 558, 489, 892, 606, 223, 875, 963, 631, 527, 168, 505, 478, 459, 364, 434, 871, 370, 162, 846, 668, 979, 73, 679, 315, 191, 579, 150, 719, 47, 707, 403, 81, 774, 406, 480, 708, 680, 407, 864, 331, 765, 757, 812, 403, 628, 966, 574, 626, 166 };
            int[] expectedResult = { 0, 1, 2, 2, 4, 4, 7, 7, 10, 10, 10, 11, 11, 11, 12, 12, 13, 13, 14, 14, 16, 16, 17, 19, 20, 20, 20, 22, 22, 25, 25, 27, 29, 34, 34, 38, 38, 38, 40, 41, 42, 44, 44, 46, 47, 47, 51, 52, 53, 53, 54, 54, 54, 56, 56, 56, 57, 64, 66, 70, 72, 73, 74, 74, 76, 77, 77, 80, 81, 84, 84, 86, 87, 88, 88, 90, 91, 92, 93, 98, 98, 100, 100, 101, 102, 102, 105, 106, 109, 109, 110, 113, 114, 120, 120, 121, 121, 122, 125, 126, 126, 126, 133, 135, 137, 137, 138, 138, 139, 141, 142, 144, 144, 146, 146, 147, 147, 147, 149, 150, 151, 152, 153, 153, 156, 159, 159, 161, 162, 165, 166, 168, 168, 170, 171, 172, 173, 174, 174, 175, 175, 175, 178, 178, 182, 183, 184, 184, 184, 184, 186, 187, 191, 191, 193, 193, 197, 201, 201, 207, 208, 208, 209, 209, 215, 218, 218, 220, 221, 221, 222, 223, 223, 224, 224, 225, 225, 225, 226, 227, 227, 227, 228, 230, 230, 231, 231, 232, 232, 232, 235, 239, 241, 242, 242, 245, 246, 246, 247, 248, 250, 250, 250, 250, 250, 251, 252, 252, 253, 254, 257, 258, 259, 260, 260, 261, 261, 261, 263, 264, 266, 266, 267, 268, 271, 271, 274, 275, 278, 278, 280, 281, 282, 282, 283, 284, 284, 284, 285, 285, 286, 287, 290, 291, 291, 294, 295, 295, 297, 297, 298, 299, 300, 301, 301, 302, 303, 306, 307, 307, 307, 308, 308, 309, 310, 310, 311, 315, 318, 319, 319, 320, 320, 320, 320, 321, 322, 324, 324, 325, 325, 326, 329, 329, 330, 331, 332, 334, 334, 335, 335, 336, 338, 340, 340, 340, 341, 342, 343, 343, 343, 346, 346, 347, 349, 353, 356, 357, 359, 360, 360, 362, 363, 364, 365, 367, 368, 370, 373, 374, 374, 376, 377, 381, 382, 383, 384, 388, 389, 390, 395, 395, 397, 400, 402, 403, 403, 403, 403, 404, 405, 406, 406, 407, 407, 410, 411, 411, 413, 413, 414, 415, 417, 418, 418, 418, 420, 425, 425, 427, 427, 429, 429, 433, 434, 439, 439, 441, 443, 444, 444, 446, 446, 447, 448, 448, 448, 451, 452, 454, 455, 456, 458, 459, 459, 459, 460, 461, 463, 463, 465, 465, 466, 467, 467, 473, 473, 475, 476, 476, 477, 478, 480, 480, 481, 484, 485, 486, 488, 489, 489, 490, 491, 491, 493, 495, 496, 496, 497, 498, 499, 499, 500, 504, 505, 505, 506, 506, 507, 509, 509, 515, 516, 518, 520, 524, 524, 525, 526, 527, 527, 527, 528, 528, 529, 529, 530, 531, 532, 532, 534, 536, 537, 538, 540, 541, 544, 548, 549, 551, 552, 553, 553, 553, 554, 554, 558, 562, 563, 564, 566, 566, 567, 568, 568, 569, 569, 570, 570, 571, 571, 573, 574, 574, 575, 576, 579, 580, 582, 586, 586, 587, 588, 589, 589, 591, 591, 592, 594, 594, 594, 595, 596, 596, 596, 596, 598, 598, 598, 600, 600, 600, 602, 603, 605, 606, 609, 613, 615, 616, 619, 619, 622, 625, 626, 628, 628, 628, 630, 631, 632, 633, 635, 635, 636, 636, 636, 637, 638, 639, 640, 640, 641, 642, 643, 643, 644, 645, 646, 647, 650, 651, 651, 653, 660, 661, 662, 663, 663, 666, 668, 670, 671, 672, 672, 672, 674, 675, 676, 677, 677, 677, 677, 678, 679, 680, 680, 680, 682, 684, 684, 684, 686, 688, 690, 690, 694, 694, 695, 696, 697, 698, 699, 703, 703, 704, 704, 705, 706, 707, 708, 709, 709, 713, 719, 720, 720, 724, 724, 725, 725, 727, 729, 730, 730, 731, 731, 731, 732, 735, 735, 736, 737, 738, 738, 740, 740, 743, 744, 745, 745, 745, 747, 749, 749, 750, 751, 753, 754, 754, 755, 755, 757, 759, 760, 760, 765, 766, 768, 769, 769, 769, 769, 770, 770, 772, 772, 774, 779, 779, 780, 781, 784, 787, 788, 798, 798, 798, 799, 800, 801, 801, 802, 802, 803, 803, 803, 807, 809, 809, 809, 811, 812, 812, 813, 814, 815, 815, 817, 818, 820, 820, 824, 825, 826, 828, 828, 829, 830, 833, 834, 834, 835, 836, 837, 837, 837, 840, 843, 843, 845, 846, 846, 850, 852, 853, 855, 857, 857, 859, 859, 861, 863, 864, 866, 866, 868, 868, 870, 870, 870, 871, 872, 873, 875, 875, 876, 876, 877, 877, 877, 878, 879, 879, 880, 881, 887, 887, 891, 892, 892, 893, 893, 895, 897, 897, 900, 901, 901, 903, 903, 905, 912, 914, 914, 914, 916, 918, 918, 920, 921, 923, 924, 925, 926, 929, 930, 931, 931, 932, 935, 936, 937, 938, 942, 945, 946, 948, 948, 949, 954, 954, 957, 958, 960, 963, 963, 963, 966, 966, 968, 971, 971, 971, 974, 976, 979, 980, 980, 981, 982, 986, 988, 989, 991, 992, 993, 995, 996, 996, 998, 999, 999 };
            Sorting.QuickSort(initialArr, 0, initialArr.Length - 1);
            for (int i = 0; i < initialArr.Length; i++)
            {
                if (initialArr[i] != expectedResult[i])
                {
                    Assert.Fail();
                }
            }
        }

        /// <summary>
        /// A test for QuickSort
        /// </summary>
        [TestMethod]
        public void DoQuickSort_4()
        {
            int[] initialArr = { 256, 997, 476, 17, 875, 74, 536, 722, 785, 145, 974, 603, 427, 624, 538, 753, 677, 562, 154, 292, 572, 513, 460, 357, 529, 30, 490, 407, 317, 963, 513, 335, 149, 630, 396, 49, 396, 356, 63, 881, 858, 38, 713, 217, 346, 92, 609, 997, 754, 525, 364, 119, 750, 946, 391, 743, 536, 118, 487, 845, 583, 128, 404, 821, 631, 638, 454, 796, 228, 489, 356, 321, 498, 272, 433, 534, 800, 243, 11, 437, 421, 493, 652, 792, 599, 394, 585, 202, 239, 653, 512, 277, 869, 218, 297, 730, 633, 892, 586, 707, 638, 812, 768, 265, 168, 43, 621, 477, 513, 856, 942, 293, 107, 49, 424, 89, 475, 612, 221, 237, 53, 251, 557, 574, 976, 79, 451, 280, 975, 703, 900, 907, 657, 303, 799, 608, 725, 387, 624, 556, 772, 108, 688, 382, 710, 219, 170, 820, 794, 208, 254, 21, 670, 348, 654, 386, 254, 194, 289, 89, 591, 341, 502, 809, 955, 34, 636, 803, 250, 815, 364, 88, 988, 665, 464, 945, 562, 174, 863, 756, 908, 631, 486, 767, 449, 879, 237, 308, 648, 413, 354, 531, 98, 534, 964, 431, 605, 879, 426, 675, 582, 366, 569, 978, 843, 165, 32, 4, 884, 709, 823, 80, 330, 532, 180, 960, 855, 734, 360, 75, 797, 328, 155, 837, 461, 833, 990, 453, 701, 32, 339, 683, 747, 188, 173, 542, 61, 507, 923, 283, 846, 233, 423, 939, 589, 274, 200, 565, 354, 3, 576, 871, 518, 350, 878, 254, 211, 732, 517, 10, 175, 579, 302, 851, 370, 139, 332, 141, 358, 637, 899, 347, 811, 76, 228, 563, 905, 215, 247, 187, 632, 424, 98, 697, 456, 468, 164, 396, 309, 919, 331, 328, 990, 912, 108, 267, 930, 571, 568, 450, 941, 59, 206, 717, 104, 228, 59, 442, 122, 314, 349, 995, 485, 329, 378, 750, 481, 604, 394, 902, 974, 935, 832, 438, 306, 570, 357, 898, 968, 961, 632, 333, 647, 797, 245, 573, 218, 381, 593, 228, 408, 722, 274, 994, 570, 336, 843, 660, 534, 357, 785, 325, 176, 666, 475, 6, 227, 767, 411, 533, 870, 160, 473, 160, 682, 16, 348, 688, 84, 805, 532, 100, 11, 166, 493, 251, 660, 837, 868, 969, 727, 697, 364, 610, 175, 307, 156, 980, 321, 238, 346, 450, 969, 59, 357, 248, 249, 114, 312, 554, 988, 154, 575, 729, 825, 685, 314, 10, 173, 223, 346, 389, 899, 441, 805, 173, 795, 863, 984, 374, 859, 367, 366, 845, 458, 82, 130, 951, 809, 244, 2, 546, 524, 314, 981, 573, 121, 635, 785, 490, 992, 145, 806, 97, 892, 956, 551, 528, 254, 184, 452, 386, 129, 937, 694, 620, 787, 730, 270, 743, 555, 362, 201, 928, 221, 800, 864, 584, 459, 232, 51, 160, 77, 494, 381, 714, 561, 269, 953, 502, 530, 601, 697, 624, 792, 616, 416, 587, 619, 361, 785, 391, 364, 42, 934, 630, 944, 878, 876, 92, 91, 966, 68, 21, 132, 291, 308, 635, 555, 980, 59, 518, 776, 768, 212, 953, 665, 576, 136, 604, 383, 277, 965, 97, 447, 659, 796, 35, 559, 751, 769, 682, 393, 860, 410, 564, 532, 676, 492, 500, 308, 781, 31, 639, 302, 266, 614, 596, 829, 980, 965, 368, 742, 271, 709, 814, 1, 970, 573, 473, 495, 272, 75, 804, 210, 376, 124, 916, 357, 647, 421, 989, 84, 635, 296, 602, 246, 325, 795, 180, 44, 199, 206, 578, 786, 401, 940, 122, 151, 596, 563, 561, 102, 18, 5, 35, 705, 227, 429, 926, 142, 698, 239, 182, 559, 976, 283, 107, 974, 106, 568, 675, 175, 393, 428, 295, 66, 496, 17, 809, 436, 2, 764, 760, 83, 859, 886, 65, 629, 260, 896, 18, 896, 868, 38, 346, 960, 24, 18, 809, 117, 833, 147, 44, 28, 887, 386, 708, 590, 709, 968, 209, 209, 619, 490, 139, 933, 478, 98, 700, 89, 218, 477, 713, 210, 549, 779, 306, 355, 81, 335, 42, 477, 207, 692, 602, 855, 720, 731, 195, 472, 177, 474, 919, 291, 687, 808, 276, 378, 898, 412, 481, 925, 318, 720, 898, 355, 433, 834, 479, 108, 79, 353, 509, 374, 926, 731, 1, 927, 887, 284, 213, 746, 902, 227, 911, 744, 557, 422, 523, 740, 503, 927, 456, 668, 853, 116, 159, 487, 793, 247, 421, 885, 252, 87, 393, 823, 965, 545, 365, 955, 806, 348, 491, 614, 199, 734, 23, 90, 808, 154, 797, 11, 311, 738, 604, 151, 897, 840, 520, 809, 571, 514, 134, 639, 862, 327, 493, 814, 834, 87, 778, 12, 56, 567, 933, 154, 436, 842, 469, 118, 92, 69, 678, 638, 449, 410, 574, 514, 482, 241, 926, 125, 24, 555, 383, 292, 214, 851, 751, 872, 241, 209, 255, 720, 376, 785, 955, 743, 804, 449, 715, 55, 371, 401, 716, 502, 835, 495, 190, 452, 752, 979, 331, 593, 161, 653, 987, 500, 183, 641, 940, 584, 91, 596, 877, 883, 814, 958, 262, 664, 455, 831, 709, 32, 525, 871, 753, 623, 839, 881, 456, 718, 661, 298, 119, 261, 877, 661, 559, 722, 798, 454, 559, 162, 508, 130, 963, 774, 523, 833, 688, 877, 232, 526, 997, 921, 269, 298, 67, 290, 899, 364, 661, 302, 185, 222, 923, 792, 476, 616, 5, 152, 399, 540, 866, 0, 271, 546, 524, 395, 907, 979, 99, 6, 193, 578, 485, 135, 301, 198, 991, 579, 593, 268, 823, 433, 793, 257, 977, 286, 206, 170, 297, 907, 827, 535, 478, 692, 660, 996, 650, 722, 774, 672, 382, 920, 265, 654, 108, 607, 736, 788, 491, 278, 624, 426, 558, 130, 716, 432, 207, 13, 569, 237, 188, 736, 681, 191, 178, 657, 99, 792 };
            int[] expectedResult = { 0, 1, 1, 2, 2, 3, 4, 5, 5, 6, 6, 10, 10, 11, 11, 11, 12, 13, 16, 17, 17, 18, 18, 18, 21, 21, 23, 24, 24, 28, 30, 31, 32, 32, 32, 34, 35, 35, 38, 38, 42, 42, 43, 44, 44, 49, 49, 51, 53, 55, 56, 59, 59, 59, 59, 61, 63, 65, 66, 67, 68, 69, 74, 75, 75, 76, 77, 79, 79, 80, 81, 82, 83, 84, 84, 87, 87, 88, 89, 89, 89, 90, 91, 91, 92, 92, 92, 97, 97, 98, 98, 98, 99, 99, 100, 102, 104, 106, 107, 107, 108, 108, 108, 108, 114, 116, 117, 118, 118, 119, 119, 121, 122, 122, 124, 125, 128, 129, 130, 130, 130, 132, 134, 135, 136, 139, 139, 141, 142, 145, 145, 147, 149, 151, 151, 152, 154, 154, 154, 154, 155, 156, 159, 160, 160, 160, 161, 162, 164, 165, 166, 168, 170, 170, 173, 173, 173, 174, 175, 175, 175, 176, 177, 178, 180, 180, 182, 183, 184, 185, 187, 188, 188, 190, 191, 193, 194, 195, 198, 199, 199, 200, 201, 202, 206, 206, 206, 207, 207, 208, 209, 209, 209, 210, 210, 211, 212, 213, 214, 215, 217, 218, 218, 218, 219, 221, 221, 222, 223, 227, 227, 227, 228, 228, 228, 228, 232, 232, 233, 237, 237, 237, 238, 239, 239, 241, 241, 243, 244, 245, 246, 247, 247, 248, 249, 250, 251, 251, 252, 254, 254, 254, 254, 255, 256, 257, 260, 261, 262, 265, 265, 266, 267, 268, 269, 269, 270, 271, 271, 272, 272, 274, 274, 276, 277, 277, 278, 280, 283, 283, 284, 286, 289, 290, 291, 291, 292, 292, 293, 295, 296, 297, 297, 298, 298, 301, 302, 302, 302, 303, 306, 306, 307, 308, 308, 308, 309, 311, 312, 314, 314, 314, 317, 318, 321, 321, 325, 325, 327, 328, 328, 329, 330, 331, 331, 332, 333, 335, 335, 336, 339, 341, 346, 346, 346, 346, 347, 348, 348, 348, 349, 350, 353, 354, 354, 355, 355, 356, 356, 357, 357, 357, 357, 357, 358, 360, 361, 362, 364, 364, 364, 364, 364, 365, 366, 366, 367, 368, 370, 371, 374, 374, 376, 376, 378, 378, 381, 381, 382, 382, 383, 383, 386, 386, 386, 387, 389, 391, 391, 393, 393, 393, 394, 394, 395, 396, 396, 396, 399, 401, 401, 404, 407, 408, 410, 410, 411, 412, 413, 416, 421, 421, 421, 422, 423, 424, 424, 426, 426, 427, 428, 429, 431, 432, 433, 433, 433, 436, 436, 437, 438, 441, 442, 447, 449, 449, 449, 450, 450, 451, 452, 452, 453, 454, 454, 455, 456, 456, 456, 458, 459, 460, 461, 464, 468, 469, 472, 473, 473, 474, 475, 475, 476, 476, 477, 477, 477, 478, 478, 479, 481, 481, 482, 485, 485, 486, 487, 487, 489, 490, 490, 490, 491, 491, 492, 493, 493, 493, 494, 495, 495, 496, 498, 500, 500, 502, 502, 502, 503, 507, 508, 509, 512, 513, 513, 513, 514, 514, 517, 518, 518, 520, 523, 523, 524, 524, 525, 525, 526, 528, 529, 530, 531, 532, 532, 532, 533, 534, 534, 534, 535, 536, 536, 538, 540, 542, 545, 546, 546, 549, 551, 554, 555, 555, 555, 556, 557, 557, 558, 559, 559, 559, 559, 561, 561, 562, 562, 563, 563, 564, 565, 567, 568, 568, 569, 569, 570, 570, 571, 571, 572, 573, 573, 573, 574, 574, 575, 576, 576, 578, 578, 579, 579, 582, 583, 584, 584, 585, 586, 587, 589, 590, 591, 593, 593, 593, 596, 596, 596, 599, 601, 602, 602, 603, 604, 604, 604, 605, 607, 608, 609, 610, 612, 614, 614, 616, 616, 619, 619, 620, 621, 623, 624, 624, 624, 624, 629, 630, 630, 631, 631, 632, 632, 633, 635, 635, 635, 636, 637, 638, 638, 638, 639, 639, 641, 647, 647, 648, 650, 652, 653, 653, 654, 654, 657, 657, 659, 660, 660, 660, 661, 661, 661, 664, 665, 665, 666, 668, 670, 672, 675, 675, 676, 677, 678, 681, 682, 682, 683, 685, 687, 688, 688, 688, 692, 692, 694, 697, 697, 697, 698, 700, 701, 703, 705, 707, 708, 709, 709, 709, 709, 710, 713, 713, 714, 715, 716, 716, 717, 718, 720, 720, 720, 722, 722, 722, 722, 725, 727, 729, 730, 730, 731, 731, 732, 734, 734, 736, 736, 738, 740, 742, 743, 743, 743, 744, 746, 747, 750, 750, 751, 751, 752, 753, 753, 754, 756, 760, 764, 767, 767, 768, 768, 769, 772, 774, 774, 776, 778, 779, 781, 785, 785, 785, 785, 785, 786, 787, 788, 792, 792, 792, 792, 793, 793, 794, 795, 795, 796, 796, 797, 797, 797, 798, 799, 800, 800, 803, 804, 804, 805, 805, 806, 806, 808, 808, 809, 809, 809, 809, 809, 811, 812, 814, 814, 814, 815, 820, 821, 823, 823, 823, 825, 827, 829, 831, 832, 833, 833, 833, 834, 834, 835, 837, 837, 839, 840, 842, 843, 843, 845, 845, 846, 851, 851, 853, 855, 855, 856, 858, 859, 859, 860, 862, 863, 863, 864, 866, 868, 868, 869, 870, 871, 871, 872, 875, 876, 877, 877, 877, 878, 878, 879, 879, 881, 881, 883, 884, 885, 886, 887, 887, 892, 892, 896, 896, 897, 898, 898, 898, 899, 899, 899, 900, 902, 902, 905, 907, 907, 907, 908, 911, 912, 916, 919, 919, 920, 921, 923, 923, 925, 926, 926, 926, 927, 927, 928, 930, 933, 933, 934, 935, 937, 939, 940, 940, 941, 942, 944, 945, 946, 951, 953, 953, 955, 955, 955, 956, 958, 960, 960, 961, 963, 963, 964, 965, 965, 965, 966, 968, 968, 969, 969, 970, 974, 974, 974, 975, 976, 976, 977, 978, 979, 979, 980, 980, 980, 981, 984, 987, 988, 988, 989, 990, 990, 991, 992, 994, 995, 996, 997, 997, 997 };
            Sorting.QuickSort(initialArr, 0, initialArr.Length - 1);
            for (int i = 0; i < initialArr.Length; i++)
            {
                if (initialArr[i] != expectedResult[i])
                {
                    Assert.Fail();
                }
            }
        }

        /// <summary>
        /// A test for QuickSort
        /// </summary>
        [TestMethod]
        public void DoQuickSort_5()
        {
            int[] initialArr = { 29, 39, 773, 448, 203, 971, 799, 22, 310, 75, 765, 845, 587, 820, 964, 329, 397, 785, 558, 20, 844, 878, 958, 646, 866, 153, 149, 496, 954, 555, 605, 67, 60, 102, 157, 272, 710, 72, 641, 641, 199, 293, 367, 466, 726, 166, 52, 237, 373, 649, 673, 493, 531, 182, 616, 151, 80, 126, 582, 50, 821, 302, 68, 754, 469, 698, 785, 484, 663, 691, 619, 325, 144, 916, 820, 551, 511, 492, 920, 699, 100, 912, 123, 304, 881, 111, 535, 877, 485, 5, 191, 583, 489, 590, 820, 897, 224, 612, 996, 27, 381, 568, 574, 681, 30, 347, 349, 615, 361, 64, 640, 588, 206, 882, 949, 908, 178, 763, 872, 358, 163, 908, 999, 657, 500, 35, 835, 553, 96, 923, 327, 899, 495, 892, 318, 532, 338, 442, 274, 533, 761, 919, 515, 420, 365, 602, 376, 606, 641, 911, 718, 460, 739, 638, 864, 473, 568, 916, 180, 994, 512, 796, 519, 438, 737, 741, 92, 313, 564, 417, 570, 735, 489, 339, 596, 243, 392, 578, 291, 897, 659, 228, 911, 184, 205, 866, 159, 857, 28, 844, 963, 421, 262, 280, 21, 964, 400, 77, 682, 624, 509, 62, 42, 224, 340, 982, 971, 400, 41, 620, 80, 989, 624, 282, 335, 283, 884, 334, 232, 870, 581, 235, 285, 719, 453, 148, 473, 209, 317, 631, 842, 314, 895, 667, 387, 596, 186, 687, 843, 223, 895, 759, 816, 407, 764, 973, 796, 979, 944, 738, 80, 66, 845, 812, 42, 274, 777, 322, 770, 192, 508, 761, 83, 409, 778, 765, 94, 957, 894, 739, 96, 197, 490, 9, 975, 822, 418, 877, 955, 479, 352, 494, 264, 578, 551, 776, 469, 83, 624, 113, 818, 863, 917, 651, 714, 133, 676, 407, 629, 998, 879, 839, 84, 205, 642, 883, 575, 835, 837, 220, 856, 900, 367, 290, 840, 13, 497, 504, 857, 1, 296, 10, 332, 781, 920, 232, 279, 838, 294, 841, 145, 11, 247, 957, 600, 512, 410, 58, 936, 668, 200, 634, 246, 403, 256, 917, 496, 626, 811, 700, 636, 171, 549, 627, 702, 868, 506, 303, 284, 409, 603, 736, 540, 995, 75, 845, 652, 409, 690, 327, 603, 438, 568, 189, 800, 661, 764, 929, 524, 2, 736, 653, 27, 593, 205, 974, 462, 620, 255, 731, 6, 106, 773, 526, 64, 464, 93, 250, 328, 411, 265, 86, 936, 484, 97, 197, 602, 359, 826, 40, 104, 577, 778, 281, 672, 949, 709, 946, 790, 100, 382, 32, 154, 958, 320, 496, 664, 41, 124, 336, 568, 513, 600, 113, 737, 649, 717, 543, 496, 8, 371, 102, 793, 215, 627, 429, 328, 492, 854, 115, 754, 146, 460, 227, 28, 232, 932, 977, 163, 600, 532 };
            int[] expectedResult = { 1, 2, 5, 6, 8, 9, 10, 11, 13, 20, 21, 22, 27, 27, 28, 28, 29, 30, 32, 35, 39, 40, 41, 41, 42, 42, 50, 52, 58, 60, 62, 64, 64, 66, 67, 68, 72, 75, 75, 77, 80, 80, 80, 83, 83, 84, 86, 92, 93, 94, 96, 96, 97, 100, 100, 102, 102, 104, 106, 111, 113, 113, 115, 123, 124, 126, 133, 144, 145, 146, 148, 149, 151, 153, 154, 157, 159, 163, 163, 166, 171, 178, 180, 182, 184, 186, 189, 191, 192, 197, 197, 199, 200, 203, 205, 205, 205, 206, 209, 215, 220, 223, 224, 224, 227, 228, 232, 232, 232, 235, 237, 243, 246, 247, 250, 255, 256, 262, 264, 265, 272, 274, 274, 279, 280, 281, 282, 283, 284, 285, 290, 291, 293, 294, 296, 302, 303, 304, 310, 313, 314, 317, 318, 320, 322, 325, 327, 327, 328, 328, 329, 332, 334, 335, 336, 338, 339, 340, 347, 349, 352, 358, 359, 361, 365, 367, 367, 371, 373, 376, 381, 382, 387, 392, 397, 400, 400, 403, 407, 407, 409, 409, 409, 410, 411, 417, 418, 420, 421, 429, 438, 438, 442, 448, 453, 460, 460, 462, 464, 466, 469, 469, 473, 473, 479, 484, 484, 485, 489, 489, 490, 492, 492, 493, 494, 495, 496, 496, 496, 496, 497, 500, 504, 506, 508, 509, 511, 512, 512, 513, 515, 519, 524, 526, 531, 532, 532, 533, 535, 540, 543, 549, 551, 551, 553, 555, 558, 564, 568, 568, 568, 568, 570, 574, 575, 577, 578, 578, 581, 582, 583, 587, 588, 590, 593, 596, 596, 600, 600, 600, 602, 602, 603, 603, 605, 606, 612, 615, 616, 619, 620, 620, 624, 624, 624, 626, 627, 627, 629, 631, 634, 636, 638, 640, 641, 641, 641, 642, 646, 649, 649, 651, 652, 653, 657, 659, 661, 663, 664, 667, 668, 672, 673, 676, 681, 682, 687, 690, 691, 698, 699, 700, 702, 709, 710, 714, 717, 718, 719, 726, 731, 735, 736, 736, 737, 737, 738, 739, 739, 741, 754, 754, 759, 761, 761, 763, 764, 764, 765, 765, 770, 773, 773, 776, 777, 778, 778, 781, 785, 785, 790, 793, 796, 796, 799, 800, 811, 812, 816, 818, 820, 820, 820, 821, 822, 826, 835, 835, 837, 838, 839, 840, 841, 842, 843, 844, 844, 845, 845, 845, 854, 856, 857, 857, 863, 864, 866, 866, 868, 870, 872, 877, 877, 878, 879, 881, 882, 883, 884, 892, 894, 895, 895, 897, 897, 899, 900, 908, 908, 911, 911, 912, 916, 916, 917, 917, 919, 920, 920, 923, 929, 932, 936, 936, 944, 946, 949, 949, 954, 955, 957, 957, 958, 958, 963, 964, 964, 971, 971, 973, 974, 975, 977, 979, 982, 989, 994, 995, 996, 998, 999 };
            Sorting.QuickSort(initialArr, 0, initialArr.Length - 1);
            for (int i = 0; i < initialArr.Length; i++)
            {
                if (initialArr[i] != expectedResult[i])
                {
                    Assert.Fail();
                }
            }
        }
    }
}
